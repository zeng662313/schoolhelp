<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

  <servlet>
    <servlet-name>myweb</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

    <!--自定义springmvc读取的配置文件的位置-->
    <init-param>
      <!--springMVC配置文件的位置-->
      <param-name>contextConfigLocation</param-name>
      <!--指定自定义文件的位置-->
      <param-value>classpath:conf/dispatcherServlet.xml</param-value>
    </init-param>
    <!--在 tomcat启动后，创建servlet对象
    1oad-on- startup：表示 tomcat启动后创建对象的顺序。
    他的值是整数，数值越小，tomcat创建对象的时间越早，大于等于0的整数
    -->
    <load-on-startup>1</load-on-startup>
  </servlet>
<!--  用来设置哪些请求交给dispatherservlet-->
  <servlet-mapping>
    <servlet-name>myweb</servlet-name>
    <!--使用框架的时候，un1- pattern可以使用两种值
        1.使用扩展名方式，语法*，xX，xxx是自定义的扩展名。常用的方式*，do，*， action，*，mvc等等
        http：//localhost：8080/myweb/some.do
        http：//localhost：8080/myweb/other.do
        2.使用斜杠"/",代表把所有的处理都交给dispatherservlet处理，但是dispatherservlet没有处理静态资源的能力
        不过动态资源还可以访问，因为它能处理
        可以通过在dispatherservlet中加上<mvc:default-servlet-handler/>来创建一个处理静态资源的对象
        不过这个和requestMapping注解冲突，需要加入<mvc:annotation-driven />来解决冲突-->
    <url-pattern>*.do</url-pattern>
  </servlet-mapping>
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:conf/applicationContext.xml</param-value>
  </context-param>
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!--注册声明过滤器，解决post乱码问题-->
  <filter>
    <filter-name>CharacterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <!--设置项目中的字符编码-->
    <init-param>
      <param-name>encoding</param-name>
      <param-value>utf-8</param-value>
    </init-param>
    <!--强制请求对象（ Httpservletrequest）使用 encoding编码的-->
    <init-param>
      <param-name>forceRequestEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <!--强制应答对象（ HttpservletrespOnse）使用 encoding编码的值-->
      <param-name>forceResponseEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>

  <!--使用过滤器，/*表示强制所有的请求都先经过过滤器处理-->
  <filter-mapping>
    <filter-name>CharacterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

</web-app>